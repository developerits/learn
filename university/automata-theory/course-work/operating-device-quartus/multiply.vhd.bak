library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Multiply is
generic (n:integer:=4); -- n параметр, задает разрядность операндов
Port(a:in std_logic_vector(n-1 downto 0); -- множимое
     b: in std_logic_vector(n-1 downto 0); -- множитель
     c: out std_logic_vector(2*n-1 downto 0)); -- произведение
end Multiply;

architecture Behavioral of Multiply is 
begin process(a,b)
variable ra: std_logic_vector (2*n-1 downto 0); -- для хранения множимого
variable rb: std_logic_vector (n-1 downto 0); -- для хранения множителя
variable rc: std_logic_vector (2*n-1 downto 0); -- для формирования суммы ЧП
begin

if b(n-1) = '1' then
	ra(n-1 downto 0) := not(a) + 1; -- [-A]д
	rb := not(b) + 1; -- [-B]д
else
	ra(n-1 downto 0) := a;
	rb := b;
end if;
ra(2*n-1 downto n) := (others => ra(n-1));



ra(n-1 downto 0):=a; -- присваиваем ra значение множимого
ra(2*n-1 downto n):=(others =>a(n-1)); -- заполняем старшие разряды ra знаковым
rb:=b; -- присваиваем rb значение множителя
rc:=(others=>'0');   -- обнулям сумму ЧП
for i in 1 to n loop -- выполняем в цикле n раз
    if (rb(n-1)='1') then
        if i=1 then
            rc:= rc+not(ra)+1; -- корректирующий шаг[-A]д
            else rc:= rc+ra;   --  прибавляем множимое +[A]д
        end if;
    end if;
        if i=n then exit; -- если последний шаг, то выходим из цикла
    end if;
    rc(2*n-1 downto 0):=rc(2*n-2 downto 0)&'0'; -- сдиг суммы ЧП влево
    rb:=rb(n-2 downto 0)&'0'; -- сдвиг множителя влево
end loop;
c<=rc(2*n-1 downto 0); -- передача результата на выход устройства
end process;
end Behavioral;
